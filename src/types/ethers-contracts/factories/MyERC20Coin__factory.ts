/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MyERC20Coin, MyERC20CoinInterface } from '../MyERC20Coin';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'allowance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientAllowance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'balance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'approver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidApprover',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidReceiver',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSpender',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [],
    name: 'InitialSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'Name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'Symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b506040518060400160405280601381526020017f4c6944656e676875694552433230546f6b656e000000000000000000000000008152506040518060400160405280600381526020017f4c4448000000000000000000000000000000000000000000000000000000000081525081600390816200008f91906200060e565b508060049081620000a191906200060e565b505050620000c233620186a0620000c8640100000000026401000000009004565b6200082c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200013d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016200013491906200073a565b60405180910390fd5b6200015a600083836200015e640100000000026401000000009004565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620001b4578060026000828254620001a7919062000786565b925050819055506200028a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000243578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200023a93929190620007d2565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002d5578060026000828254039250508190555062000322565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200038191906200080f565b60405180910390a3505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200041057607f821691505b602082108103620004265762000425620003c8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b60008160020a8302905092915050565b600060088302620004937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000451565b6200049f868362000451565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ec620004e6620004e084620004b7565b620004c1565b620004b7565b9050919050565b6000819050919050565b6200050883620004cb565b620005206200051782620004f3565b84845462000461565b825550505050565b600090565b6200053762000528565b62000544818484620004fd565b505050565b5b818110156200056c57620005606000826200052d565b6001810190506200054a565b5050565b601f821115620005bb5762000585816200042c565b620005908462000441565b81016020851015620005a0578190505b620005b8620005af8562000441565b83018262000549565b50505b505050565b60008160020a8304905092915050565b6000620005e360001984600802620005c0565b1980831691505092915050565b6000620005fe8383620005d0565b9150826002028217905092915050565b62000619826200038e565b67ffffffffffffffff81111562000635576200063462000399565b5b620006418254620003f7565b6200064e82828562000570565b600060209050601f83116001811462000686576000841562000671578287015190505b6200067d8582620005f0565b865550620006ed565b601f19841662000696866200042c565b60005b82811015620006c05784890151825560018201915060208501945060208101905062000699565b86831015620006e05784890151620006dc601f891682620005d0565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200072282620006f5565b9050919050565b620007348162000715565b82525050565b600060208201905062000751600083018462000729565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200079382620004b7565b9150620007a083620004b7565b9250828201905080821115620007bb57620007ba62000757565b5b92915050565b620007cc81620004b7565b82525050565b6000606082019050620007e9600083018662000729565b620007f86020830185620007c1565b620008076040830184620007c1565b949350505050565b6000602082019050620008266000830184620007c1565b92915050565b610f63806200083c6000396000f3fe608060405234801561001057600080fd5b50600436106100d1576000357c010000000000000000000000000000000000000000000000000000000090048063313ce5671161008e578063313ce567146101ae57806370a08231146101cc5780638052474d146101fc57806395d89b411461021a578063a9059cbb14610238578063dd62ed3e14610268576100d1565b806306fdde03146100d6578063095ea7b3146100f457806318160ddd146101245780631eb25d131461014257806323b872dd146101605780633045aaf314610190575b600080fd5b6100de610298565b6040516100eb9190610bb7565b60405180910390f35b61010e60048036038101906101099190610c72565b61032a565b60405161011b9190610ccd565b60405180910390f35b61012c61034d565b6040516101399190610cf7565b60405180910390f35b61014a610357565b6040516101579190610cf7565b60405180910390f35b61017a60048036038101906101759190610d12565b61035e565b6040516101879190610ccd565b60405180910390f35b61019861038d565b6040516101a59190610bb7565b60405180910390f35b6101b66103c6565b6040516101c39190610d81565b60405180910390f35b6101e660048036038101906101e19190610d9c565b6103cb565b6040516101f39190610cf7565b60405180910390f35b610204610413565b6040516102119190610bb7565b60405180910390f35b61022261044c565b60405161022f9190610bb7565b60405180910390f35b610252600480360381019061024d9190610c72565b6104de565b60405161025f9190610ccd565b60405180910390f35b610282600480360381019061027d9190610dc9565b610501565b60405161028f9190610cf7565b60405180910390f35b6060600380546102a790610e38565b80601f01602080910402602001604051908101604052809291908181526020018280546102d390610e38565b80156103205780601f106102f557610100808354040283529160200191610320565b820191906000526020600020905b81548152906001019060200180831161030357829003601f168201915b5050505050905090565b600080610335610588565b9050610342818585610590565b600191505092915050565b6000600254905090565b620186a081565b600080610369610588565b90506103768582856105a2565b610381858585610637565b60019150509392505050565b6040518060400160405280600381526020017f4c4448000000000000000000000000000000000000000000000000000000000081525081565b600090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040518060400160405280601381526020017f4c6944656e676875694552433230546f6b656e0000000000000000000000000081525081565b60606004805461045b90610e38565b80601f016020809104026020016040519081016040528092919081815260200182805461048790610e38565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b5050505050905090565b6000806104e9610588565b90506104f6818585610637565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b61059d838383600161072b565b505050565b60006105ae8484610501565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156106315781811015610621578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161061893929190610e78565b60405180910390fd5b6106308484848403600061072b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106a95760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106a09190610eaf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361071b5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107129190610eaf565b60405180910390fd5b610726838383610902565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361079d5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016107949190610eaf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361080f5760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016108069190610eaf565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156108fc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108f39190610cf7565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109545780600260008282546109489190610ef9565b92505081905550610a27565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109e0578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016109d793929190610e78565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a705780600260008282540392505081905550610abd565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b1a9190610cf7565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b61578082015181840152602081019050610b46565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b8982610b27565b610b938185610b32565b9350610ba3818560208601610b43565b610bac81610b6d565b840191505092915050565b60006020820190508181036000830152610bd18184610b7e565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c0982610bde565b9050919050565b610c1981610bfe565b8114610c2457600080fd5b50565b600081359050610c3681610c10565b92915050565b6000819050919050565b610c4f81610c3c565b8114610c5a57600080fd5b50565b600081359050610c6c81610c46565b92915050565b60008060408385031215610c8957610c88610bd9565b5b6000610c9785828601610c27565b9250506020610ca885828601610c5d565b9150509250929050565b60008115159050919050565b610cc781610cb2565b82525050565b6000602082019050610ce26000830184610cbe565b92915050565b610cf181610c3c565b82525050565b6000602082019050610d0c6000830184610ce8565b92915050565b600080600060608486031215610d2b57610d2a610bd9565b5b6000610d3986828701610c27565b9350506020610d4a86828701610c27565b9250506040610d5b86828701610c5d565b9150509250925092565b600060ff82169050919050565b610d7b81610d65565b82525050565b6000602082019050610d966000830184610d72565b92915050565b600060208284031215610db257610db1610bd9565b5b6000610dc084828501610c27565b91505092915050565b60008060408385031215610de057610ddf610bd9565b5b6000610dee85828601610c27565b9250506020610dff85828601610c27565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e5057607f821691505b602082108103610e6357610e62610e09565b5b50919050565b610e7281610bfe565b82525050565b6000606082019050610e8d6000830186610e69565b610e9a6020830185610ce8565b610ea76040830184610ce8565b949350505050565b6000602082019050610ec46000830184610e69565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0482610c3c565b9150610f0f83610c3c565b9250828201905080821115610f2757610f26610eca565b5b9291505056fea2646970667358221220ec02ba408a4c59cd2129ac2dd7f600026913f5f63c25df764617d385b9d933d464736f6c63430008140033';

type MyERC20CoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyERC20CoinConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyERC20Coin__factory extends ContractFactory {
  constructor(...args: MyERC20CoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<MyERC20Coin> {
    return super.deploy(overrides || {}) as Promise<MyERC20Coin>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MyERC20Coin {
    return super.attach(address) as MyERC20Coin;
  }
  override connect(signer: Signer): MyERC20Coin__factory {
    return super.connect(signer) as MyERC20Coin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyERC20CoinInterface {
    return new utils.Interface(_abi) as MyERC20CoinInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MyERC20Coin {
    return new Contract(address, _abi, signerOrProvider) as MyERC20Coin;
  }
}
